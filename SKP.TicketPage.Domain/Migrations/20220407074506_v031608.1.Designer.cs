// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SKP.TicketPage.Domain;

namespace SKP.TicketPage.Domain.Migrations
{
    [DbContext(typeof(TicketPageContext))]
    [Migration("20220407074506_v031608.1")]
    partial class v0316081
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorID")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1225)
                        .HasColumnType("nvarchar(1225)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("TicketID");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AuthorID = 2,
                            Content = "This is a test. Ignore.",
                            DateOfCreation = new DateTime(2022, 4, 7, 9, 45, 5, 381, DateTimeKind.Local).AddTicks(7391),
                            TicketID = 1
                        },
                        new
                        {
                            ID = 2,
                            AuthorID = 3,
                            Content = "This is a test response. Ignore.",
                            DateOfCreation = new DateTime(2022, 4, 7, 9, 45, 5, 381, DateTimeKind.Local).AddTicks(7842),
                            TicketID = 1
                        },
                        new
                        {
                            ID = 3,
                            AuthorID = 4,
                            Content = "Another test. Ignore.",
                            DateOfCreation = new DateTime(2022, 4, 7, 9, 45, 5, 381, DateTimeKind.Local).AddTicks(7850),
                            TicketID = 2
                        });
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IncludePrefix")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Prefix")
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.HasKey("ID");

                    b.HasIndex("Prefix")
                        .IsUnique()
                        .HasFilter("[Prefix] IS NOT NULL");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            IncludePrefix = true,
                            Name = "Automatik",
                            Prefix = "A"
                        },
                        new
                        {
                            ID = 2,
                            IncludePrefix = false,
                            Name = "Elektriker",
                            Prefix = "EL"
                        },
                        new
                        {
                            ID = 3,
                            IncludePrefix = true,
                            Name = "Elektronik",
                            Prefix = "E"
                        },
                        new
                        {
                            ID = 4,
                            IncludePrefix = true,
                            Name = "ITM",
                            Prefix = "I"
                        });
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            Active = false,
                            ConcurrencyStamp = "b9452eea-64ca-4001-99e2-5defd10441e6",
                            EmailConfirmed = false,
                            FirstName = "System",
                            LastName = "",
                            LockoutEnabled = false,
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "SystemSeed",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "56d04aa5-d393-4619-b12c-5c14d3f203e0",
                            DepartmentID = 1,
                            Email = "MyDeveloper@Test.com",
                            EmailConfirmed = true,
                            FirstName = "My",
                            LastName = "Developer",
                            LockoutEnabled = false,
                            NormalizedEmail = "MYDEVELOPER@TEST.COM",
                            NormalizedUserName = "MYDEVELOPER@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEJzgOjw21P3+jYa9prFma1wOfVUAlOIACg6dlxrcHBoOZpELKaQJMDfteV1C8GV6Gg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "DeveloperSeed",
                            TwoFactorEnabled = false,
                            UserName = "MyDeveloper@Test.com"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "53917102-4166-4d4c-a007-e381bcc6ec62",
                            DepartmentID = 2,
                            Email = "MyInstructor@Test.com",
                            EmailConfirmed = true,
                            FirstName = "My",
                            LastName = "Instructor",
                            LockoutEnabled = false,
                            NormalizedEmail = "MYINSTRUCTOR@TEST.COM",
                            NormalizedUserName = "MYINSTRUCTOR@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKBrnfAHXheiDMRkGxnSWDjfuCNxrdJryZYxvEJZVU1HTg+EpnPnpx5OXUdjsefIDA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "InstructorSeed",
                            TwoFactorEnabled = false,
                            UserName = "MyInstructor@Test.com"
                        },
                        new
                        {
                            Id = 4,
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "07e4c300-870c-4052-af5d-eb301346152e",
                            DepartmentID = 2,
                            Email = "MyAdmin@Test.com",
                            EmailConfirmed = true,
                            FirstName = "My",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "MYADMIN@TEST.COM",
                            NormalizedUserName = "MYADMIN@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEDXraS/UPrCs+gQDca8MTN2Ia7mnuDTJln07BH0/9UTHB9TW12t/DtgZ0UlB7Owf7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "AdminSeed",
                            TwoFactorEnabled = false,
                            UserName = "MyAdmin@Test.com"
                        },
                        new
                        {
                            Id = 5,
                            AccessFailedCount = 0,
                            Active = true,
                            ConcurrencyStamp = "bb60ce14-fb6b-4083-ad33-3f4c9548ffc4",
                            DepartmentID = 1,
                            Email = "MyUser@Test.com",
                            EmailConfirmed = true,
                            FirstName = "My",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "MYUSER@TEST.COM",
                            NormalizedUserName = "MYUSER@TEST.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAELqThc7/MYj+dzGoePriv3AyMoJfFF2LZDmcbYo6CdsrQt1vrAByNZFq4i48b3copg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "UserSeed",
                            TwoFactorEnabled = false,
                            UserName = "MyUser@Test.com"
                        });
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.EmployeeTicket", b =>
                {
                    b.Property<int>("AssignedEmployeeID")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int>("TicketID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAssigned")
                        .HasColumnType("datetime2");

                    b.HasKey("AssignedEmployeeID", "TicketID");

                    b.HasIndex("TicketID");

                    b.ToTable("EmployeeTickets");

                    b.HasData(
                        new
                        {
                            AssignedEmployeeID = 3,
                            TicketID = 1,
                            DateAssigned = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            AssignedEmployeeID = 2,
                            TicketID = 1,
                            DateAssigned = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConcurrencyStamp = "d64f7c72-c1ec-4140-95bc-0ec65d43669e",
                            Description = "A system role used to provide auto content",
                            DisplayName = "System",
                            Name = "System",
                            NormalizedName = "SYSTEM"
                        },
                        new
                        {
                            Id = 2,
                            ConcurrencyStamp = "a9a35c1a-27c7-425b-be85-deed6265c3d6",
                            Description = "No elevated permissions",
                            DisplayName = "Normal",
                            Name = "Base",
                            NormalizedName = "BASE"
                        },
                        new
                        {
                            Id = 3,
                            ConcurrencyStamp = "aaaee226-293a-424e-b48f-406a894f383f",
                            Description = "Adminsitrator access to the system",
                            DisplayName = "Admin",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 4,
                            ConcurrencyStamp = "06a76f64-f56c-4bfe-aacd-6f40769c890d",
                            Description = "Super user with access to the entire system",
                            DisplayName = "Instruktør",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        },
                        new
                        {
                            Id = 5,
                            ConcurrencyStamp = "c33306f3-8a7a-477b-bb0e-443d6f863cda",
                            Description = "Deep access to internal data",
                            DisplayName = "Udvikler",
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        });
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Ticket", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorID")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2450)
                        .HasColumnType("nvarchar(2450)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("AuthorID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("TicketNumber")
                        .IsUnique();

                    b.ToTable("Tickets");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            AuthorID = 2,
                            DateOfCreation = new DateTime(2022, 4, 7, 9, 45, 5, 376, DateTimeKind.Local).AddTicks(1561),
                            DepartmentID = 1,
                            Description = "My First Ticket",
                            Priority = 0,
                            Status = 0,
                            TicketNumber = "A220407001",
                            Title = "My First Ticket Title"
                        },
                        new
                        {
                            ID = 2,
                            AuthorID = 2,
                            DateOfCreation = new DateTime(2022, 4, 7, 9, 45, 5, 376, DateTimeKind.Local).AddTicks(1561),
                            DepartmentID = 1,
                            Description = "My Second Ticket",
                            Priority = 0,
                            Status = 0,
                            TicketNumber = "A220407002",
                            Title = "My Second Ticket Title"
                        },
                        new
                        {
                            ID = 3,
                            AuthorID = 3,
                            DateOfCreation = new DateTime(2022, 4, 7, 9, 45, 5, 376, DateTimeKind.Local).AddTicks(1561),
                            DepartmentID = 2,
                            Description = "My Third Ticket",
                            Priority = 0,
                            Status = 0,
                            TicketNumber = "E220407001",
                            Title = "My Third Ticket Title"
                        },
                        new
                        {
                            ID = 4,
                            AuthorID = 3,
                            DateOfCreation = new DateTime(2022, 4, 7, 9, 45, 5, 376, DateTimeKind.Local).AddTicks(1561),
                            DepartmentID = 3,
                            Description = "My Fourth Ticket",
                            Priority = 1,
                            Status = 2,
                            TicketNumber = "220407001",
                            Title = "My Fourth Ticket Title"
                        },
                        new
                        {
                            ID = 5,
                            AuthorID = 4,
                            DateOfCreation = new DateTime(2022, 4, 7, 9, 45, 5, 376, DateTimeKind.Local).AddTicks(1561),
                            DepartmentID = 4,
                            Description = "My Fifth Ticket",
                            Priority = 2,
                            Status = 1,
                            TicketNumber = "I220407001",
                            Title = "My Fifth Ticket Title"
                        });
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.EmployeeRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<int>");

                    b.HasDiscriminator().HasValue("EmployeeRole");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 5
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 4
                        },
                        new
                        {
                            UserId = 4,
                            RoleId = 3
                        },
                        new
                        {
                            UserId = 5,
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("SKP.TicketPage.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("SKP.TicketPage.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("SKP.TicketPage.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("SKP.TicketPage.Domain.Entities.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKP.TicketPage.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("SKP.TicketPage.Domain.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Comment", b =>
                {
                    b.HasOne("SKP.TicketPage.Domain.Entities.Employee", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SKP.TicketPage.Domain.Entities.Ticket", "Ticket")
                        .WithMany("Comments")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Employee", b =>
                {
                    b.HasOne("SKP.TicketPage.Domain.Entities.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.EmployeeTicket", b =>
                {
                    b.HasOne("SKP.TicketPage.Domain.Entities.Employee", "AssignedEmployee")
                        .WithMany("AssignedTickets")
                        .HasForeignKey("AssignedEmployeeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SKP.TicketPage.Domain.Entities.Ticket", "Ticket")
                        .WithMany("AssignedEmployees")
                        .HasForeignKey("TicketID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedEmployee");

                    b.Navigation("Ticket");
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Ticket", b =>
                {
                    b.HasOne("SKP.TicketPage.Domain.Entities.Employee", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SKP.TicketPage.Domain.Entities.Department", "Department")
                        .WithMany("Tickets")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Department", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Employee", b =>
                {
                    b.Navigation("AssignedTickets");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("SKP.TicketPage.Domain.Entities.Ticket", b =>
                {
                    b.Navigation("AssignedEmployees");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
